# streamlit_app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import os
from sklearn.preprocessing import StandardScaler
import plotly.express as px  


# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="An√°lise Preditiva de Engajamento dos Jogadores",
    layout="wide",
    page_icon="üéÆ",
    initial_sidebar_state="expanded"
)

# Fun√ß√µes de pr√©-processamento
def preprocess_data(df):
    # Criar c√≥pia para n√£o modificar o original
    df_processed = df.copy()
    
    # Filtrar apenas n√≠veis Low e High
    df_processed = df_processed[df_processed['EngagementLevel'].isin(['Low', 'High'])]
    
    # Converter EngagementLevel para bin√°rio
    df_processed['EngagementLevel'] = df_processed['EngagementLevel'].map({'Low': 0, 'High': 1})
    
    # Dummyfica√ß√£o
    cat_vars = ['Gender', 'GameDifficulty']
    df_processed = pd.get_dummies(df_processed, columns=cat_vars, drop_first=True)
    
    # Padroniza√ß√£o
    scaler = StandardScaler()
    numeric_vars = ['Age', 'SessionsPerWeek', 'PlayTimeHours', 
                   'AchievementsUnlocked', 'PlayerLevel']
    df_processed[numeric_vars] = scaler.fit_transform(df_processed[numeric_vars])
    
    return df_processed, scaler

# Carregar e preparar dados
@st.cache_data
def load_data():
    try:
        # Carregar dados originais
        dados = pd.read_csv("online_gaming_behavior_dataset.csv")
        
        # Filtrar apenas Low e High para visualiza√ß√£o tamb√©m
        dados = dados[dados['EngagementLevel'].isin(['Low', 'High'])]
        
        # Criar vers√£o para visualiza√ß√£o (remove colunas n√£o usadas)
        cols_to_keep = ['Age', 'SessionsPerWeek', 'PlayTimeHours', 
                       'AchievementsUnlocked', 'PlayerLevel', 'EngagementLevel',
                        'GameDifficulty', 'Gender']
        
        dados_vis = dados[cols_to_keep].copy()
        
        # Processar dados para modelagem
        dados_prep, scaler = preprocess_data(dados_vis)
        
        return dados_vis, dados_prep, scaler
    
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return None, None, None

# Carregar os dados
dados_vis, dados_prep, scaler = load_data()

# Barra lateral - Navega√ß√£o
st.sidebar.title("Menu")
pagina = st.sidebar.radio(
    "Se√ß√µes:",
    ["üè† Vis√£o Geral", "üîç An√°lise Explorat√≥ria", "‚öôÔ∏è Pr√©-processamento", "ü§ñ Modelo Preditivo", "üîÆ Fazer Previs√£o"]
)

# P√°gina 1: Vis√£o Geral
if pagina == "üè† Vis√£o Geral":
    st.title("üéÆ An√°lise Preditiva de Engajamento em Jogos")
    st.markdown("---")
    
    # Se√ß√£o de introdu√ß√£o com colunas
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.header("üìã Vis√£o Geral do Projeto")
        st.markdown("""
        **Objetivo:** Desenvolver um modelo preditivo para classificar o n√≠vel de engajamento de jogadores  
        **Aplica√ß√£o:** Auxiliar desenvolvedores a identificar padr√µes de comportamento e melhorar a experi√™ncia do usu√°rio  
        **Abordagem:** An√°lise explorat√≥ria + Modelagem supervisionada (classifica√ß√£o bin√°ria)
        """)
        
    #with col2:
     #   st.image("https://cdn-icons-png.flaticon.com/512/2936/2936886.png", width=100)
    
    st.markdown("---")
    
    # Se√ß√£o de dados com expansores
    with st.expander("üîç **Fonte de Dados**", expanded=True):
        st.markdown("""
        - **Dataset:** [Online Gaming Behavior Dataset](https://www.kaggle.com/datasets/rabieelkharoua/predict-online-gaming-behavior-dataset)
        - **Vari√°veis originais:** 13
        - **Amostra final:** {:,} jogadores (Low: {:,} | High: {:,})
        """.format(
            len(dados_vis),
            sum(dados_vis['EngagementLevel'] == 'Low'),
            sum(dados_vis['EngagementLevel'] == 'High')
        ))
    
    # Se√ß√£o t√©cnica com tabs
    tab1, tab2, tab3 = st.tabs(["üìä M√©tricas", "üß† Modelagem", "‚öôÔ∏è Engenharia de Features"])
    
    with tab1:
        st.subheader("Desempenho do Modelo (Ada Boost Classifier)")
        col1, col2, col3, col4 = st.columns(4)
        
        col1.metric("F1-Score", "0.88", help="M√©trica balanceada entre precis√£o e recall")
        col2.metric("Acur√°cia", "0.87", help="Percentual total de acertos")
        col3.metric("Precis√£o", "0.83", help="Quando prev√™ Alto Engajamento, acerta 84%")
        col4.metric("Sencibilidade", "0.93", help="Identifica 92% dos casos reais de Alto Engajamento")
          
    with tab2:
        st.markdown("""
        **Processo de Modelagem:**
        1. **Pr√©-processamento:** Filtragem, codifica√ß√£o e normaliza√ß√£o
        2. **Sele√ß√£o de Modelos:** Compara√ß√£o de 15 algoritmos via PyCaret (seleciondo o Ada Boos Classifier)
        3. **Tunagem:** Otimiza√ß√£o de hiperpar√¢metros para melhor F1-Score
        4. **Valida√ß√£o:** Teste com holdout de 25% dos dados
        
        **Algoritmos Testados:**""")

        # Dados da tabela
        data = {
            "Model": [
                "Ada Boost Classifier",
                "Gradient Boosting Classifier",
                "Light Gradient Boosting Machine",
                "Ridge Classifier",
                "Linear Discriminant Analysis",
                "Random Forest Classifier",
                "Naive Bayes",
                "Quadratic Discriminant Analysis",
                "Logistic Regression",
                "Extra Trees Classifier",
                "SVM - Linear Kernel",
                "Extreme Gradient Boosting",
                "K Neighbors Classifier",
                "Decision Tree Classifier",
                "Dummy Classifier"
            ],
            "F1-Score": [0.8792, 0.8776, 0.8767, 0.8759, 0.8759, 0.8755, 0.8743, 0.8735, 0.8723, 0.8705, 0.8680, 0.8679, 0.8540, 0.7823, 0.6669],
            "Acur√°cia": [0.8719, 0.8711, 0.8707, 0.8716, 0.8716, 0.8696, 0.8703, 0.8696, 0.8689, 0.8651, 0.8663, 0.8628, 0.8491, 0.7840, 0.5003],
            "Precis√£o": [0.8324, 0.8365, 0.8381, 0.8478, 0.8478, 0.8382, 0.8491, 0.8485, 0.8510, 0.8378, 0.8397, 0.8373, 0.8278, 0.7866, 0.5003],
            "Sensibilidade": [0.9316, 0.9230, 0.9192, 0.9060, 0.9060, 0.9164, 0.9011, 0.9002, 0.8947, 0.9058, 0.8985, 0.9011, 0.8821, 0.7799, 1.0000]
        }

        df = pd.DataFrame(data)
        
        st.write("Tabela comparativa de desempenho (sem AUC, Kappa, MCC e Tempo de Treinamento)")
        st.dataframe(df, hide_index=True, use_container_width=True)
        
        st.markdown("""
        <style>
            .dataframe td {
                text-align: center !important;
            }
            .dataframe th {
                text-align: center !important;
            }
        </style>
        """, unsafe_allow_html=True)
            
            
    with tab3:
        st.markdown("""
        **V√°riaveis Descartadas:**
        1. PlayerID
        2. AvgSessionDurationMinutes
        3. GameGenre
        4. InGamePurchases
        5. Location

        **Principais Features:**
        1. SessionsPerWeek (Import√¢ncia: 60%)
        2. PlayTimeHours (12%)
        3. PlayerLevel (10%)
        4. AchievementsUnlocked (10%)
        
        **Transforma√ß√µes:**
        - One-Hot Encoding nas vari√°veis categ√≥ricas
        - Standard Scaling na vari√°veis num√©ricas
        """)
    
    # Chamada para a√ß√£o
    st.markdown("---")
    st.success("üí° **Explore as outras se√ß√µes para an√°lises detalhadas e simula√ß√µes de previs√£o!**")


# P√°gina 2: An√°lise Explorat√≥ria
elif pagina == "üîç An√°lise Explorat√≥ria":
    st.title("üîç An√°lise Explorat√≥ria dos Dados")
    st.markdown("---")
    
    if dados_vis is not None:
        st.header("üé≤ Dados Brutos (Amostra)")
        st.dataframe(dados_vis.head(), use_container_width=True)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total de Registros", len(dados_vis))
        with col2:
            st.metric("Vari√°veis Originais", len(dados_vis.columns))
    
    if dados_vis is not None:

        st.header("üìã An√°lise das Vari√°veis")
        # Gr√°fico Univariado
        st.sidebar.subheader("Gr√°fico Univariado")
        var_univariada = st.sidebar.selectbox(
            "Selecione a vari√°vel para an√°lise univariada:",
            options=['EngagementLevel', 'Age', 'PlayTimeHours', 'SessionsPerWeek', 'Gender',
                     'PlayerLevel', 'AchievementsUnlocked', 'GameDifficulty'],
            index=0
        )
        
        # Gr√°fico Bivariado
        st.sidebar.subheader("Gr√°fico Bivariado")
        var_x = st.sidebar.selectbox(
            "Selecione a vari√°vel para o eixo X:",
            options=['Age', 'PlayTimeHours', 'SessionsPerWeek', 'Gender',
                     'PlayerLevel', 'AchievementsUnlocked', 'GameDifficulty'],
            index=0
        )
        
        var_y = st.sidebar.selectbox(
            "Selecione a vari√°vel para o eixo Y:",
            options=['Age', 'PlayTimeHours', 'SessionsPerWeek', 'Gender',
                     'PlayerLevel', 'AchievementsUnlocked', 'GameDifficulty'],
            index=1
        )
        
        # Layout dos gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader(f"Distribui√ß√£o de {var_univariada} por Engajamento")
            
            # Usando Plotly para interatividade
            fig = px.histogram(dados_vis, x=var_univariada, color="EngagementLevel",
                               nbins=30, barmode="overlay",
                               title=f"Distribui√ß√£o de {var_univariada}",
                               opacity=0.7,
                               color_discrete_map={
                                  "High": '#4ECDC4',
                                  "Low": '#FF6B6B'
                              })
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader(f"Rela√ß√£o entre {var_x} e {var_y} por Engajamento")
            
            # Gr√°fico de dispers√£o com Plotly
            fig2 = px.scatter(dados_vis, x=var_x, y=var_y, color="EngagementLevel",
                              title=f"{var_x} vs {var_y}",
                              opacity=0.6,
                              color_discrete_map={
                                  "High": '#4ECDC4',
                                  "Low": '#FF6B6B'
                              })
            st.plotly_chart(fig2, use_container_width=True)

        with st.expander("Como usar esta an√°lise?"):
            
            st.markdown("""
            - No gr√°fico √† esquerda: Compare como cada n√≠vel de engajamento se distribui para uma vari√°vel espec√≠fica
            - No gr√°fico √† direita: Explore rela√ß√µes entre pares de vari√°veis num√©ricas
            - Passe o mouse sobre os pontos para ver detalhes
            - Use os menus laterais para selecionar diferentes vari√°veis
            """)
        
        st.markdown("---")
        st.subheader("Matriz de Correla√ß√£o")
        
        # Matriz de correla√ß√£o
        fig, ax = plt.subplots(figsize=(12, 8))
        # Calculando a matriz de correla√ß√£o apenas para vari√°veis num√©ricas
        numeric_vars = dados_vis.select_dtypes(include=['int64', 'float64'])
        corr_matrix = numeric_vars.corr()
        # Criando o heatmap
        sns.heatmap(
            corr_matrix,
            annot=True,
            cmap='coolwarm',
            center=0,
            fmt='.2f',
            linewidths=0.5,
            ax=ax
        )
        # Ajustando o t√≠tulo
        ax.set_title('Correla√ß√£o entre Vari√°veis Num√©ricas', pad=20)
        st.pyplot(fig)

        st.markdown("---")
        st.header("üßê Interpreta√ß√µes Gerais")
        
        st.markdown("""
        ### üìä An√°lise das Vari√°veis Categ√≥ricas
        
        - Por exce√ß√£o das vari√°vel 'EngagementLevel', as vari√°veis categ√≥ricas restantes ('GameDifficulty' e Gender')
        apresentam algum desbalanceamento entre suas categorias.
        - Todas as vari√°veis categ√≥ricas apresentam uma propor√ß√£o equilibrada considerando as classe de alto e baixo engajamento.
        - **Implica√ß√£o**: 
          - Nenhuma categoria domina excessivamente os entre as classes avaliadas o que pode dificultar identifica√ß√£o dos 
          padr√µes de engajamento
        """)
        
        st.markdown("""
        ### üìà An√°lise das Vari√°veis Cont√≠nuas
        
        - Por exce√ß√£o das vari√°vel 'SessionsPerWeek', as vari√°veis quantitativas restantes ('Age', 'PlayTimeHours', 
        'PlayerLevel' e 'AchievementsUnlocked') apresentam aproximadamente uma distribui√ß√£o uniforme.
        - Considerando as calsse de alto e baixo engajamento, todas as vari√°veis apresentam quase a mesma frequ√™ncia de resposta. 
        - **Implica√ß√£o**: 
          - A vari√°vel 'SessionsPerWeek' √© provavelmente a vari√°vel mais importante para a classifica√ß√£o do engajamento do jogador.

        """)
        st.markdown("""
        ### üìâ An√°lise Bivariada

        - De modo geral as vari√°veis n√£o apresentam uma rela√ß√£o definida, apresentando "nuvens" de pontos sem um padr√£o
        espec√≠fico.
        - **Implica√ß√£o**: 
          - Rela√ß√µes lineares aparentemente ausentes
          - Necessidade de investigar poss√≠veis padr√µes n√£o-lineares
        """)
        
        st.markdown("""
        ### üî¢ An√°lise de Correla√ß√£o Num√©rica
        
        - Correla√ß√µes geralmente pr√≥ximas de zero
        - Aus√™ncia de rela√ß√µes lineares fortes entre features
        - **Implica√ß√£o**:
          - Desafio para modelos lineares tradicionais
          - Oportunidade para algoritmos que capturam rela√ß√µes complexas
        """)
        st.markdown("---")
        st.header("üßê Interpreta√ß√µes Gerais")
        
        st.markdown("""
        ### üìä An√°lise das Vari√°veis Categ√≥ricas
        
        Diferentemente da vari√°vel 'EngagementLevel' as vari√°veis categ√≥ricas 'GameDifficulty' e 'Gender' apresentam 
        um certo desbalanceamento entre 
        suas categorias. Curiosamente, quando observamos a distribui√ß√£o dessas vari√°veis em rela√ß√£o √†s classes de alto 
        e baixo engajamento, nota-se uma propor√ß√£o equilibrada entre os grupos. Esta caracter√≠stica sugere que 
        nenhuma categoria espec√≠fica domina excessivamente qualquer classe de engajamento, o que pode tornar mais 
        desafiador a identifica√ß√£o de padr√µes categ√≥ricos claros para a classifica√ß√£o. 
        """)
        
        st.markdown("""
        ### üìà An√°lise das Vari√°veis Cont√≠nuas
        
        Dentre as vari√°veis quantitativas analisadas, 'SessionsPerWeek' se destaca por apresentar uma distribui√ß√£o 
        distinta das demais ('Age', 'PlayTimeHours', 'PlayerLevel' e 'AchievementsUnlocked'), que seguem 
        aproximadamente uma distribui√ß√£o uniforme. Quando examinamos o comportamento dessas vari√°veis entre as 
        classes de engajamento, observamos frequ√™ncias de resposta muito similares. Esta an√°lise sugere que 
        'SessionsPerWeek' provavelmente ser√° a vari√°vel mais discriminativa e importante para a classifica√ß√£o do 
        n√≠vel de engajamento dos jogadores.
        """)
        
        st.markdown("""
        ### üìâ An√°lise Bivariada
        
        A explora√ß√£o das rela√ß√µes entre pares de vari√°veis revela predominantemente padr√µes difusos, com forma√ß√µes de 
        "nuvens" de pontos sem geometria definida. Esta aus√™ncia de padr√µes lineares claros entre as vari√°veis indica 
        que poss√≠veis rela√ß√µes existentes provavelmente seguem padr√µes mais complexos e n√£o-lineares, que n√£o s√£o 
        facilmente identific√°veis atrav√©s de an√°lise visual simples.
        """)
        
        st.markdown("""
        ### üî¢ An√°lise de Correla√ß√£o Num√©rica
        
        Os coeficientes de correla√ß√£o calculados entre as vari√°veis num√©ricas apresentam valores geralmente pr√≥ximos 
        de zero, confirmando a aus√™ncia de rela√ß√µes lineares fortes entre os atributos. Este cen√°rio representa um 
        desafio particular para modelos que dependem fundamentalmente de rela√ß√µes lineares, mas ao mesmo tempo abre 
        oportunidades para a aplica√ß√£o de algoritmos mais sofisticados capazes de capturar intera√ß√µes e padr√µes 
        n√£o-lineares nos dados.
        """)
        
# P√°gina 3: Pr√©-processamento
elif pagina == "‚öôÔ∏è Pr√©-processamento":
    st.title("‚öôÔ∏è Pr√©-processamento dos Dados")
    st.markdown("---")
    
    if dados_prep is not None:
        st.header("üõ†Ô∏è Transforma√ß√µes Aplicadas")
      
        st.markdown("""
        ### 1. Sele√ß√£o de Features
        Foram removidas as seguintes vari√°veis:
        - **'PlayerID':** Identificador √∫nico sem valor preditivo
        - **'AvgSessionDurationMinutes':** Eliminada para evitar multicolinearidade com `SessionsPerWeek` e `PlayTimeHours`
        - **'GameGenre', 'InGamePurchases' e 'Location':** Removidas ap√≥s an√°lise de import√¢ncia de features por n√£o apresentarem relev√¢ncia nos melhores modelos testados
        """)

        st.markdown("""
        ### 2. Transforma√ß√£o de Vari√°veis
        **Vari√°vel Target:**
        - Codifica√ß√£o bin√°ria:
          - `Low` ‚Üí 0
          - `High` ‚Üí 1

        **Vari√°veis Categ√≥ricas (One-Hot Encoding):**
        ```python
        pd.get_dummies(columns=['GameDifficulty', 'Gender'], drop_first=True)
        ```
        - **Resultado:** Adi√ß√£o de {} novas colunas
        """.format(len(dados_prep.columns)))  # Ajuste o n√∫mero conforme suas vari√°veis
        #- **Estrat√©gia:** `drop_first=True` para evitar a armadilha da vari√°vel dummy

        st.markdown("""
        **Vari√°veis Num√©ricas:**
        ```python
        StandardScaler().fit_transform(['Age', 'SessionsPerWeek', 
                                      'PlayTimeHours', 'AchievementsUnlocked',
                                      'PlayerLevel'])
        ```
        - **Efeito:** Centraliza√ß√£o (Œº=0) e Escala (œÉ=1)
        - **Benef√≠cios:**
          - Melhor converg√™ncia para modelos sens√≠veis √† escala (SVM, Regress√£o Log√≠stica)
          - Import√¢ncia relativa compar√°vel entre features
        """)

        st.markdown("""
        ### 3. Valida√ß√£o do Pr√©-processamento
        - **Balanceamento de classes:** {:.1f}:{:.1f} (Low:High)
        - **Aus√™ncia de NaNs:** Confirmada ({} valores faltantes totais)
        """.format(
            *dados_prep['EngagementLevel'].value_counts(normalize=True).values,
            dados_prep.isna().sum().sum(),  
        ))

#        with st.expander("üîç Visualiza√ß√£o do Pipeline Completo"):
 #           st.image("https://miro.medium.com/max/1400/1*4PqYyZbws0N4yR0sFw3yJQ.png", 
  #                  caption="Exemplo de fluxo de pr√©-processamento", width=400)
        
        st.header("üé≤ Dados Pr√©-processados (Amostra)")
        st.dataframe(dados_prep.head(), use_container_width=True)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Registros", len(dados_prep))
        with col2:
            st.metric("Vari√°veis", len(dados_prep.columns))

# P√°gina 4: Modelo Preditivo
elif pagina == "ü§ñ Modelo Preditivo":
    st.title("ü§ñ Modelo Preditivo: Ada Boost Classifier")
    st.markdown("---")

    st.header("Metodologia")
    st.markdown("""
    - **Framework:** PyCaret
    - **Sele√ß√£o de Modelos:** Compara√ß√£o com base no rankeamneto com o F1-Score, seguido do melhor desempenho geral entre as m√©tricas
    - **Melhor Modelo:** Ada Boost Classifier (tunado ap√≥s sele√ß√£o)
    - **M√©tricas:**
      - Acur√°cia: 87%
      - Sencibilidade: 93%
      - Precis√£o: 83%
      - F1-Score: 88%
      - AUC: 92%
    """)

    tab1, tab2 = st.tabs(["üîç Interpreta√ß√£o do Modelo", "üéØ Quem √© o Ada Boost Classifier?"])
    
    with tab1:
        st.header("üîç Interpreta√ß√£o do Modelo")
        try:
            pipeline = joblib.load('modelo.pkl')
            #st.success("‚úÖ Modelo carregado com sucesso!")
            
            st.markdown("""
            ### Significado das M√©tricas
            
            **Interpreta√ß√£o:**  
            
            O modelo demonstra um **bom desempenho geral** (Acur√°cia de 87%), com destaque para sua capacidade de:  
            
            - **Capturar casos Positivos**: Alta Sencibilidade (93%) indica que o modelo identifica efetivamente jogadores engajados (apenas 8% de falsos negativos)  
            - **Distinguir Classes**: AUC (√Årea sib a Curva ROC) de 92% revela excelente separa√ß√£o entre os jogadores de baixo engajamento dos de alto engajamento 
            - **Equil√≠brio**: F1-Score (88%) mostra boa harmonia entre Precis√£o e Recall  
            - **Chance de Erro**: Precis√£o (83%) sugere que, quando o modelo prev√™ "alto engajamento", h√° 16% de chance de ser falso positivo. Algo espera dada a 
            sobreposi√ß√£o natural nos padr√µes de engajamento e das vari√°veis preditoras apresentarem um poder limitado de discrimina√ß√£o  
            """)
            
            st.markdown(""" ### Import√¢ncia das Vari√°veis""")

            feature_importance = pd.DataFrame({
                #'Feature': ['SessionsPerWeek', 'PlayerLevel', 'AchievementsUnlocked', 'PlayTimeHours','Age', 
                 #           'InGamePurchases_1', 'EngagementLevel', 'GameGenre_RPG', 'GameGenre_Simulation', 
                  #          'GameGenre_Sports', 'GameGenre_Strategy', 'GameDifficulty_Hard', 'GameDifficulty_Medium'],
                #'Importance': [0.98, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]
                'Vari√°vel': ['Age',
                            'PlayTimeHours',
                            'SessionsPerWeek',
                            'PlayerLevel',
                            'AchievementsUnlocked',
                            'GameDifficulty_Hard',
                            'GameDifficulty_Medium',
                            'Gender_Male'],
                'Import√¢ncia': [ 0.06,
                                0.12,
                                0.6,
                                0.1,
                                0.1,
                                0,
                                0,
                                0.02]

            })
            #feature_importance = pd.DataFrame({'Variavel': pipeline.named_steps['actual_estimator'].feature_names_in_, 
            #                                   'Importancia': pipeline.named_steps['actual_estimator'].feature_importances_})

            #st.write("Classes do modelo:", pipeline.classes_)
            #st.write("Feature names:", pipeline.named_steps['actual_estimator'].feature_names_in_)
            #st.write(pipeline.named_steps)
            #st.write("Import√¢ncia das Features:", pipeline.named_steps['actual_estimator'].feature_importances_)

            fig, ax = plt.subplots(figsize=(10,5))
            sns.barplot(data=feature_importance, x='Import√¢ncia', y='Vari√°vel', palette='viridis')
            st.pyplot(fig)
            
            st.markdown(""" 
            A an√°lise de import√¢ncia de vari√°veis revela que 'SessionsPerWeek' √© o preditor mais relevante, respondendo por 60% do poder explicativo do modelo, 
            indicando que a frequ√™ncia de sess√µes √© o fator determinante para classificar o engajamento. As demais vari√°veis ('Age', 'PlayTimeHours', 
            'PlayerLevel', 'AchievementsUnlocked' e 'Gender_Male') compartilham os 40% restantes de import√¢ncia, com 'Gender_Male' sendo a menos influente. 
            Embora as dummies 'GameDifficulty_Hard' e 'GameDifficulty_Medium' n√£o apresentem contribui√ß√£o significativa individualmente, 
            sua inclus√£o se mostrou necess√°ria, pois a remo√ß√£o da vari√°vel 'GameDifficulty' causou superconcentra√ß√£o de import√¢ncia (100%) em 'SessionsPerWeek', 
            sugerendo que essas categorias atuam como reguladores da import√¢ncia da vari√°vel principal, garantindo uma distribui√ß√£o mais equilibrada do poder 
            preditivo entre as features.
            """)
    
            
        except Exception as e:
            st.error(f"Erro ao carregar modelo: {e}")

    with tab2:
        # Se√ß√£o 3: Conhecendo o Gradient Boosting
        st.header("üéØ Quem √© o Ada Boost Classifier?")
        st.markdown("""
        <div style="text-align: justify">
        O <strong>Gradient Boosting Classifier</strong> √© como um time de especialistas trabalhando em equipe, onde cada novo membro 
        aprende com os erros dos anteriores. Veja como ele se destaca:
        </div>
        """, unsafe_allow_html=True)
        # Explica√ß√£o visual em colunas
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown("""
            ### üß† Como Funciona?
            
            ##### üå± **Passo Inicial - Base Simples**
            - Come√ßa com um modelo fraco (ex: √°rvore de decis√£o rasa - stump)
            - Todos os exemplos t√™m peso igual inicialmente
            
            ##### üîÑ **Processo Iterativo - Aprendizado com Erros**
            1. **Primeira Itera√ß√£o**:
               - O stump faz predi√ß√µes iniciais
               - Erros s√£o identificados e os exemplos mal classificados recebem mais peso
            
            2. **Itera√ß√µes Seguintes**:
               - Cada novo stump foca nos exemplos mais dif√≠ceis (com maior peso)
               - Modelos subsequentes "herdam" os erros corrigidos anteriormente
            
            ##### ‚öñÔ∏è **Mecanismo de Peso**
            - **Peso dos Exemplos**: Aumenta para casos mal classificados
            - **Peso dos Modelos**: Stumps mais precisos t√™m maior influ√™ncia no voto final
            
            ##### ‚ú® **Resultado Final - Voto Ponderado**
            - Combina todas as previs√µes dos stumps
            - Cada contribui√ß√£o √© ponderada pela precis√£o do modelo
            
            ##### üåü **Vantagens Chave**
            - Foco autom√°tico nos casos mais dif√≠ceis
            - Simples e eficaz para problemas bin√°rios
            - Menos propenso a overfitting que algoritmos complexos
            
            """)
        with col2:

            st.markdown("""
            ### üèÜ Crit√©rio de Sele√ß√£o do Modelo
            
            O modelo foi selecionado atrav√©s de uma an√°lise comparativa das m√©tricas de desempenho, considerando inicialmente os **3 melhores modelos com base no F1-Score**. 
            Foi atribu√≠do um sistema de pontua√ß√£o por posi√ß√£o:
            
            - <b>1¬∫ lugar</b> em cada m√©trica: <b>+2 pontos</b>
            - <b>2¬∫ lugar</b>: <b>+1 ponto</b>
                        
            Ap√≥s essa avalia√ß√£o, os tr√™s melhores modelos ficaram com:
            
            <div style="margin-left: 20px;">
            
            <b>1. Ada Boost Classifier: (7 ponttos)</b>  
               - ü•á <b>Melhor desempenho</b> em:  
                 ‚Ä¢ F1-Score
                 ‚Ä¢ Acur√°cia
                 ‚Ä¢ Sencibilidade  
               - ü•à <b>Segunda melhor</b> em:
                 ‚Ä¢ √Årea sob a Curva ROC
            
            <b>2. Gradient Boosting Classifier (6 pontos)</b>  
               - ü•á <b>Melhor desempenho</b> em:  
                 ‚Ä¢ √Årea sob a Curva ROC
               - ü•à <b>Segundo melhor</b> em:  
                 ‚Ä¢ F1-Score
                 ‚Ä¢ Acur√°cia
                 ‚Ä¢ Sencibilidade
                 ‚Ä¢ Precis√£o
                 
            <b>3. Light Gradient Boosting Machine (2 pontos)</b>  
               - ü•á <b>Melhor desempenho</b> em:  
                 ‚Ä¢ Precis√£o

            </div>
            
            <h4>Crit√©rio de Sele√ß√£o Final</h4>
            Outro fator que influenciou na escolha do AdaBoost Classifier foi a distribui√ß√£o de import√¢ncia das vari√°veis. No Gradient Boosting Classifier, 
            a vari√°vel 'SessionsPerWeek' apresentava 97% de import√¢ncia, reduzindo 'PlayTimeHour' a uma relev√¢ncia quase nula - um padr√£o inadequado, pois: 
            um jogador pouco engajado pode ter v√°rias sess√µes semanais mas com poucas horas jogadas em cada, enquanto um jogador altamente engajado pode 
            acumular muitas horas de jogo em poucas sess√µes prolongadas. O AdaBoost, ao distribuir melhor essa import√¢ncia, captura essa nuance comportamental 
            de forma mais equilibrada.

            
            """, unsafe_allow_html=True)
            st.info(" **Observa√ß√£o Final:üí°As diferen√ßas entre as m√©tricas dos dois modelos s√£o muito sutis, n√£o havendo um desempenho significativamente superior de um em rela√ß√£o ao outro.**")
                
        # Detalhes t√©cnicos com expansor
        with st.expander("üßÆ A Matem√°tica por Tr√°s", expanded=False):
            st.markdown("""
            **F√≥rmula de Atualiza√ß√£o de Pesos**:
            ```
            w_i ‚Üê w_i * exp(Œ±_t * I(y_i ‚â† h_t(x_i)))
            ```
            Onde:
            - `Œ±_t`: Peso do classificador (baseado em sua precis√£o)
            - `h_t(x_i)`: Predi√ß√£o do stump no passo t
            - `I()`: Fun√ß√£o indicadora (1 se erro, 0 se correto)
            
            **Passo a Passo**:
            1. Inicializa pesos uniformes para todos os exemplos
            2. Para cada itera√ß√£o:
               a. Treina stump nos dados com pesos atuais
               b. Calcula erro ponderado
               c. Atualiza pesos dos exemplos
               d. Atribui peso ao modelo baseado em sua precis√£o
            3. Combina todos os stumps via voto ponderado
            """)
            
        with st.expander("üîß Configura√ß√£o T√©cnica Detalhada", expanded=False):
            st.code("""
            AdaBoostClassifier(
                algorithm='SAMME.R',       # Vers√£o real do algoritmo AdaBoost
                base_estimator=None,        # Por padr√£o usa DecisionTree com max_depth=1 (stump)
                learning_rate=1.0,          # Taxa de aprendizado (contribui√ß√£o de cada modelo)
                n_estimators=50,           # N√∫mero de stumps (modelos fracos)
                random_state=42             # Reprodutibilidade
            )
            """, language='python')
        #st.markdown("""
        #<div style="background-color: #2e4057; padding: 15px; border-radius: 5px; color: white;">
        #<strong>üí° Curiosidade T√©cnica:</strong> Nosso modelo final combina <strong style="color:#f4d35e">150 dessas √°rvores</strong>, 
        #cada uma com profundidade m√°xima 4 (para evitar overfitting), usando taxa de aprendizado de 0.1.
        #</div>
        #""", unsafe_allow_html=True)
# P√°gina 5: Previs√£o com o Modelo
elif pagina == "üîÆ Fazer Previs√£o":
    st.title("üîÆ Simulador de Previs√£o de Engajamento")
    st.markdown("---")
    
    if dados_vis is not None and scaler is not None:
        st.header("üìã Insira os Dados do Jogador")
        
        col1, col2 = st.columns(2)
        
        with col1:
            age = st.slider("Idade", 15, 50, 23)
            play_time = st.slider("Horas Jogadas/Dia", 1, 12, 3)
            sessions = st.slider("Sess√µes por Semana", 1, 20, 13)
            level = st.slider("N√≠vel do Personagem", 1, 99, 25)
            #location = st.radio("Localiza√ß√£o do Jogador", ["√Åsia", "USA", "Europa", "Outro"], horizontal=True)
        
        with col2:
            achievements = st.slider("Conquistas Desbloqueadas", 0, 100, 30)
            difficulty = st.selectbox("Dificuldade do Jogo", ["F√°cil", "M√©dio", "Dif√≠cil"], index=1)
            #genre = st.selectbox("G√™nero do Jogo", ["Acition", "RPG", "Simulation", "Sports", "Strategy"])
            #purchases = st.radio("Realizou Compras no Jogo", ["Sim", "N√£o"], horizontal=True)
            gender = st.radio("G√™nero do Jogador", ["Feminino", "Masculino"], horizontal=True)        
           
        if st.button("üîç Prever N√≠vel de Engajamento", type="primary", use_container_width=True):
            try:                
                # 1. Carrega o pipeline
                pipeline = joblib.load('modelo.pkl')
                
                # 2. Prepara os dados J√Å CODIFICADOS como o modelo espera
                input_data = pd.DataFrame({
                    'Age': [age],
                    'PlayTimeHours': [play_time],
                    'SessionsPerWeek': [sessions],
                    'PlayerLevel': [level],
                    'AchievementsUnlocked': [achievements],
                    
                    # Vari√°veis categ√≥ricas J√Å CODIFICADAS (one-hot)
                    'GameDifficulty_Hard': [1 if difficulty == "Dif√≠cil" else 0],
                    'GameDifficulty_Medium': [1 if difficulty == "M√©dio" else 0],
                    #'GameGenre_RPG': [1 if genre == "RPG" else 0],
                    #'GameGenre_Simulation': [1 if genre == "Simulation" else 0],
                    #'GameGenre_Sports': [1 if genre == "Sports" else 0],
                    #'GameGenre_Strategy': [1 if genre == "Strategy" else 0],
                    #'InGamePurchases_1': [1 if purchases == "Sim" else 0],
                    'Gender_Male': [1 if gender == "Masculino" else 0]#,
                    #'Location_Europe': [1 if location == "Europa" else 0],
                    #'Location_Other': [1 if location == "Outro" else 0],
                    #'Location_USA': [1 if location == "USA" else 0]
                })
                
                # 3. Garante a ordem correta das colunas
                input_data = input_data[pipeline.named_steps['actual_estimator'].feature_names_in_]
                #st.write("Classes do modelo:", pipeline.classes_)
                #st.write("Feature names:", pipeline.named_steps['actual_estimator'].feature_names_in_)
                #st.write(pipeline.named_steps['actual_estimator'])
                #st.write("Import√¢ncia das Features:", pipeline.named_steps['actual_estimator'].feature_importances_)

                try:
                    # 4. Faz a previs√£o (o imputer vai lidar com quaisquer valores faltantes)
                    prediction = pipeline.predict(input_data)[0]
                    proba = pipeline.predict_proba(input_data)[0][1]
                    
                    #st.success(f"Previs√£o: {prediction} (Probabilidade: {proba:.2%})")
                    
                except Exception as e:
                    st.error(f"Erro na previs√£o: {str(e)}")
                    st.write("Dados enviados:", input_data)
                    st.write("Features esperadas:", pipeline.named_steps['actual_estimator'].feature_names_in_)
                    st.write("Classes do modelo:", pipeline.classes_)
                    st.write("Feature names:", pipeline.named_steps['actual_estimator'].feature_names_in_)
                    st.write(pipeline.named_steps)
                
                # Exibir resultados
                st.markdown("---")
                st.subheader("üßû‚Äç‚ôÇÔ∏è Resultado da Previs√£o")
                    
                # URLs das imagens PNG dos emojis (em alta resolu√ß√£o)
                emoji_urls = {
                    
                    "game": "https://fonts.gstatic.com/s/e/notoemoji/latest/1f3ae/512.png",
                    "book": "https://fonts.gstatic.com/s/e/notoemoji/latest/1f4d6/512.png",
                
                    "older_woman": "https://fonts.gstatic.com/s/e/notoemoji/latest/1f475/512.png",
                    "girl": "https://fonts.gstatic.com/s/e/notoemoji/latest/1f467/512.png",
                    "woman": "https://fonts.gstatic.com/s/e/notoemoji/latest/1f469/512.png",
                  
                    "older_man": "https://fonts.gstatic.com/s/e/notoemoji/latest/1f474/512.png",
                    "boy": "https://fonts.gstatic.com/s/e/notoemoji/latest/1f466/512.png",
                    "man": "https://fonts.gstatic.com/s/e/notoemoji/latest/1f468/512.png"
                }
                
                if prediction == 1:
                    st.success(f"## Alto Engajamento ({proba:.2%} de probabilidade)")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.image(emoji_urls["game"], width=200)
                    with col2:
                        if gender == 'Feminino':
                            if age >= 40:
                                st.image(emoji_urls["older_woman"], width=200)
                            elif age <= 25:
                                st.image(emoji_urls["girl"], width=200)
                            else:
                                st.image(emoji_urls["woman"], width=200)
                        else:  # Masculino
                            if age >= 40:
                                st.image(emoji_urls["older_man"], width=200)
                            elif age <= 25:
                                st.image(emoji_urls["boy"], width=200)
                            else:
                                st.image(emoji_urls["man"], width=200)
                else:
                    st.warning(f"## Baixo Engajamento ({(1-proba):.2%} de probabilidade)")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.image(emoji_urls["book"], width=200)
                    with col2:
                        if gender == 'Feminino':
                            if age >= 40:
                                st.image(emoji_urls["older_woman"], width=200)
                            elif age <= 25:
                                st.image(emoji_urls["girl"], width=200)
                            else:
                                st.image(emoji_urls["woman"], width=200)
                        else:  # Masculino
                            if age >= 40:
                                st.image(emoji_urls["older_man"], width=200)
                            elif age <= 25:
                                st.image(emoji_urls["boy"], width=200)
                            else:
                                st.image(emoji_urls["man"], width=200)
                        
            except Exception as e:
                st.error(f"Erro na previs√£o: {str(e)}")
                
# Rodap√©
st.markdown("---")
st.caption("Desenvolvido com base nas an√°lises de pr√©-processamento do notebook dispon√≠veis no [GitHub](https://github.com/thaisar13/Game-Engagement-Level)")
