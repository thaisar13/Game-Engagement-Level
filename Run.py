# streamlit_app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import os
from sklearn.preprocessing import StandardScaler

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Game Engagement Predictor",
    layout="wide",
    page_icon="üéÆ",
    initial_sidebar_state="expanded"
)

# Fun√ß√µes de pr√©-processamento
def preprocess_data(df):
    # Criar c√≥pia para n√£o modificar o original
    df_processed = df.copy()
    
    # Filtrar apenas n√≠veis Low e High
    df_processed = df_processed[df_processed['EngagementLevel'].isin(['Low', 'High'])]
    
    # Converter EngagementLevel para bin√°rio
    df_processed['EngagementLevel'] = df_processed['EngagementLevel'].map({'Low': 0, 'High': 1})
    
    # Dummyfica√ß√£o
    cat_vars = ['GameGenre', 'GameDifficulty', 'InGamePurchases']
    df_processed = pd.get_dummies(df_processed, columns=cat_vars, drop_first=True)
    
    # Padroniza√ß√£o
    scaler = StandardScaler()
    numeric_vars = ['Age', 'SessionsPerWeek', 'PlayTimeHours', 
                   'AchievementsUnlocked', 'PlayerLevel']
    df_processed[numeric_vars] = scaler.fit_transform(df_processed[numeric_vars])
    
    return df_processed, scaler

# Carregar e preparar dados
@st.cache_data
def load_data():
    try:
        # Carregar dados originais
        dados = pd.read_csv("online_gaming_behavior_dataset.csv")
        
        # Filtrar apenas Low e High para visualiza√ß√£o tamb√©m
        dados = dados[dados['EngagementLevel'].isin(['Low', 'High'])]
        
        # Criar vers√£o para visualiza√ß√£o (remove colunas n√£o usadas)
        cols_to_keep = ['Age', 'SessionsPerWeek', 'PlayTimeHours', 
                       'AchievementsUnlocked', 'PlayerLevel', 'EngagementLevel',
                       'GameGenre', 'GameDifficulty', 'InGamePurchases']
        
        dados_vis = dados[cols_to_keep].copy()
        
        # Processar dados para modelagem
        dados_prep, scaler = preprocess_data(dados)
        
        return dados_vis, dados_prep, scaler
    
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return None, None, None

# Carregar os dados
dados_vis, dados_prep, scaler = load_data()

# Barra lateral - Navega√ß√£o
st.sidebar.title("Menu")
pagina = st.sidebar.radio(
    "Se√ß√µes:",
    ["üè† Vis√£o Geral", "üîç An√°lise Explorat√≥ria", "‚öôÔ∏è Pr√©-processamento", "ü§ñ Modelo Preditivo", "üîÆ Fazer Previs√£o"]
)

# P√°gina 1: Vis√£o Geral
if pagina == "üè† Vis√£o Geral":
    st.title("üéÆ An√°lise de Engajamento em Jogos")
    st.markdown("---")
    
    st.header("üìã Sobre o Projeto")
    st.markdown("""
    Este projeto utiliza machine learning para prever o n√≠vel de engajamento de jogadores com base em:
    - Comportamento no jogo
    - Prefer√™ncias e conquistas
    """)
    
    if dados_vis is not None:
        st.header("üìä Dados Brutos (Amostra)")
        st.dataframe(dados_vis.head(), use_container_width=True)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total de Registros", len(dados_vis))
        with col2:
            st.metric("Vari√°veis Originais", len(dados_vis.columns))

# P√°gina 2: An√°lise Explorat√≥ria
elif pagina == "üîç An√°lise Explorat√≥ria":
    st.title("üîç An√°lise Explorat√≥ria dos Dados")
    st.markdown("---")
    
    if dados_vis is not None:
        st.header("Distribui√ß√£o de Engajamento")
        fig, ax = plt.subplots(figsize=(8,4))
        dados_vis['EngagementLevel'].value_counts().plot(
            kind='bar', color=['#FF6B6B', '#4ECDC4'])
        plt.xticks(rotation=0)
        st.pyplot(fig)
        
        st.header("Rela√ß√£o Idade vs Tempo de Jogo")
        fig, ax = plt.subplots(figsize=(10,6))
        sns.scatterplot(
            data=dados_vis, 
            x='Age', 
            y='PlayTimeHours', 
            hue='EngagementLevel',
            palette={0: '#FF6B6B', 1: '#4ECDC4'})
        st.pyplot(fig)
        
        st.subheader("Matriz de Correla√ß√£o")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.heatmap(dados_vis.corr(), annot=True, cmap='coolwarm', ax=ax)
        st.pyplot(fig)


# P√°gina 3: Pr√©-processamento
elif pagina == "‚öôÔ∏è Pr√©-processamento":
    st.title("‚öôÔ∏è Pr√©-processamento dos Dados")
    st.markdown("---")
    
    if dados_prep is not None:
        st.header("Transforma√ß√µes Aplicadas")
        st.markdown("""
        1. **Filtragem:** Apenas n√≠veis 'Low' e 'High' de engajamento
        2. **Remo√ß√£o de colunas:** PlayerID, AvgSessionDurationMinutes, Gender, Location
        3. **Codifica√ß√£o:**
           - EngagementLevel: Low ‚Üí 0, High ‚Üí 1
           - Vari√°veis categ√≥ricas: One-Hot Encoding
        4. **Padroniza√ß√£o:** StandardScaler nas vari√°veis num√©ricas

        Os dados foram filtrados pois n√£o era do interesse a analise da categoria de resposta M√©dio para o engajamento. 
        
        A remo√ß√£o das variaveis Gender e Location se deu pois os resultados classificat√≥rios apresentaram um melhor desempenhos em sua ausencia. 
        J√° a remo√ß√£o da variavel PlayerID foi pela informa√ß√£o do ID n√£o ser util no processo de classifica√ß√£o. 
        E por fim, a variavel AvgSessionDurationMinutes foi removida para evitar a multicolinearidade com as variaveis SessionsPerWeek e PlayTimeHours.
        
        As variaveis categoricas foram Dummyficadas (por meio da transforma√ß√£o One-Hot Encoding). 
        Tamb√©m foram testadas categorizar as variaveis quantitativas 'SessionsPerWeek', 'PlayTimeHours', 'AchievementsUnlocked' e 'PlayerLevel', 
        mas o melhor o resultado classificatorio dos modelos, de modo geral, se deu considerando essas variaveis apenas como quantitativas.

        Para uma melhor desempenho de alguns modelos, as variaveis quantitiativas foram padronizadas, ou seja, tiveram suas distribui√ß√µes centralizadas por emio da...
        """)
        
        st.header("Dados Pr√©-processados (Amostra)")
        st.dataframe(dados_prep.head(), use_container_width=True)
        
        st.header("Estrutura dos Dados Transformados")
        st.write(f"**Formato Final:** {dados_prep.shape[0]} linhas √ó {dados_prep.shape[1]} colunas")

# P√°gina 4: Modelo Preditivo
elif pagina == "ü§ñ Modelo Preditivo":
    st.title("ü§ñ Modelo de Machine Learning")
    st.markdown("---")
    
    st.header("Metodologia")
    st.markdown("""
    - **Framework:** PyCaret
    - **Sele√ß√£o de Modelos:** Compara√ß√£o com base no rankeamneto com o F1-Score e compara√ß√£o do melhor desempenho geral entre as m√©tricas
    - **Melhor Modelo:** Gradient Boosting Classifier (tunado ap√≥s sele√ß√£o)
    - **M√©tricas:**
      - Acur√°cia: 87%
      - Recall: 92%
      - Precis√£o: 84%
      - F1-Score: 88%
    """)
    
    
    try:
        model = joblib.load('model.pkl')
        st.success("‚úÖ Modelo carregado com sucesso!")
        
        st.header("Import√¢ncia das Vari√°veis")
        # Nota: Substitua com os valores reais do seu modelo
        feature_importance = pd.DataFrame({
            'Feature': ['SessionsPerWeek', 'PlayerLevel', 'AchievementsUnlocked', 'PlayTimeHours','Age', 
                        'InGamePurchases_1', 'EngagementLevel', 'GameGenre_RPG', 'GameGenre_Simulation', 
                        'GameGenre_Sports', 'GameGenre_Strategy', 'GameDifficulty_Hard', 'GameDifficulty_Medium'],
            'Importance': [0.98, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]
        })
        
        fig, ax = plt.subplots(figsize=(10,5))
        sns.barplot(data=feature_importance, x='Importance', y='Feature', palette='viridis')
        st.pyplot(fig)
        
    except Exception as e:
        st.error(f"Erro ao carregar modelo: {e}")

# P√°gina 5: Fazer Previs√£o
elif pagina == "üîÆ Fazer Previs√£o":
    st.title("üîÆ Simulador de Previs√£o")
    st.markdown("---")
    
    if dados_vis is not None and scaler is not None:
        st.header("Insira os Dados do Jogador")
        
        col1, col2 = st.columns(2)
        
        with col1:
            age = st.slider("Idade", 10, 60, 25)
            play_time = st.slider("Horas Jogadas/Semana", 1, 40, 10)
            level = st.slider("N√≠vel do Personagem", 1, 100, 30)
            
        with col2:
            achievements = st.slider("Conquistas", 0, 50, 5)
            difficulty = st.selectbox("Dificuldade", ["Easy", "Medium", "Hard"])
            genre = st.selectbox("G√™nero", ["Action", "Adventure", "RPG", "Strategy"])
        
        if st.button("Prever Engajamento", type="primary"):
            try:
                # Criar DataFrame com inputs
                input_data = pd.DataFrame({
                    'Age': [age],
                    'SessionsPerWeek': [3],  # Valor padr√£o
                    'PlayTimeHours': [play_time],
                    'AchievementsUnlocked': [achievements],
                    'PlayerLevel': [level],
                    'GameGenre': [genre],
                    'GameDifficulty': [difficulty],
                    'InGamePurchases': ['Yes']  # Valor padr√£o
                })
                
                # Pr√©-processar
                input_prep, _ = preprocess_data(input_data)
                
                # Fazer previs√£o (simula√ß√£o)
                prediction = "High"  # Substitua pela previs√£o real
                proba = 0.85  # Substitua pela probabilidade real
                
                st.success(f"Resultado: Engajamento {prediction} ({(proba if prediction == 'High' else 1-proba):.0%} de confian√ßa)")
                
                if prediction == "High":
                    st.balloons()
            except Exception as e:
                st.error(f"Erro na previs√£o: {e}")

# Rodap√©
st.markdown("---")
st.caption("Desenvolvido com base nas an√°lises de pr√©-processamento do notebook")
