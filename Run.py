
# pip install streamlit
pip install pycaret==3.0.4
pip install pandas==2.0.3
pip install numpy==1.23.5
pip install scikit-learn==1.2.2
pip install matplotlib==3.7.1
pip install seaborn==0.12.2
pip install joblib==1.2.0
pip install lightgbm==3.3.5

"""Game- Pr√©-processamento de dados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NcDNBEvk7PRvWq1nOB-yV9tEbZK-ZRZ8

# **Pr√©-processamento de Dados**

---
## **Importa√ß√£o e Prepara√ß√£o dos Dados**
"""

import kagglehub
import pandas as pd
import os

# Download latest version
path = kagglehub.dataset_download("rabieelkharoua/predict-online-gaming-behavior-dataset")
csv_path = os.path.join(path, "online_gaming_behavior_dataset.csv")
dados = pd.read_csv(csv_path)

# Filtrar apenas n√≠veis F√°cil e Dif√≠cil
dados = dados[dados['EngagementLevel'].isin(['Low', 'High'])]

dados.head()

import sweetviz as sv
import warnings
warnings.filterwarnings('ignore', category=DeprecationWarning, module='numpy')

# Alterado target_feat para GameDifficulty
eda = sv.analyze(source=dados, target_feat='GameDifficulty')
eda.show_html()

"""## **Pr√©-processamento para Machine Learning**

### **PP1 - Descarte de vari√°veis n√£o importantes**
"""

# Mantendo vari√°veis relevantes para dificuldade do jogo
dados.drop(['PlayerID', 'AvgSessionDurationMinutes','Gender', 'Location'], axis=1, inplace=True)
dados.head()

"""### **PP2 - Verifica√ß√£o de dados faltantes**"""

dados.isnull().sum()

"""### **PP3 - Dummyfica√ß√£o de Vari√°veis**"""

# Converter GameDifficulty para bin√°rio (Easy=0, Hard=1)
dados['EngagementLevel'] = dados['EngagementLevel'].map({'Low': 0, 'High': 1})

# Aplicar get_dummies nas outras vari√°veis categ√≥ricas
variaveis_cat = ['GameGenre', 'GameDifficulty', 'InGamePurchases']
dados = pd.get_dummies(dados, columns=variaveis_cat, drop_first=True)

dados.head()

"""### **PP4 - Escala das Vari√°veis Cont√≠nuas**"""

from sklearn.preprocessing import StandardScaler

# Padronizar vari√°veis num√©ricas
scaler = StandardScaler()
numericas = ['Age', 'SessionsPerWeek', 'PlayTimeHours', 'AchievementsUnlocked', 'PlayerLevel']
dados[numericas] = scaler.fit_transform(dados[numericas])

print(dados.head())

"""## **Machine Learning**"""

from pycaret.classification import *

# Configurar ambiente com GameDifficulty como target
exp = setup(
    data=dados,
    target='EngagementLevel',
    train_size=0.75,
    session_id=42#,
    #normalize=True#,
    #feature_selection=True
)

# Comparar modelos
top_models = compare_models(sort='F1', n_select=3)

# Criar e ajustar o melhor modelo
best_model = create_model(top_models[1])

# Tunagem de hiperpar√¢metros
tuned_model = tune_model(best_model, optimize='F1')

# Avaliar modelo
evaluate_model(tuned_model)

# Finalizar e salvar modelo
final_model = finalize_model(tuned_model)




# streamlit_app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import os

# Configura√ß√£o da p√°gina (APENAS UMA VEZ no in√≠cio do arquivo)
st.set_page_config(
    page_title="Game Engagement Analysis",
    layout="centered",
    page_icon="üéÆ"
)

# T√≠tulo do aplicativo
st.title("üéÆ An√°lise de Engajamento em Jogos")
st.markdown("An√°lise preditiva baseada no modelo de machine learning treinado.")

# --- Carregamento do Modelo ---
# Caminho corrigido para o Streamlit Sharing
model_path = final_model

try:
    if os.path.exists(model_path):
        model = joblib.load(model_path)
        st.success("‚úÖ Modelo carregado com sucesso!")
        
        # Se√ß√£o de an√°lise (s√≥ mostra se o modelo carregar)
        st.header("üìä Resultados do Modelo")
        
        # Informa√ß√µes do Modelo
        st.subheader("Informa√ß√µes do Modelo")
        st.write(f"**Algoritmo:** {type(model).__name__}")
        
        # Features importantes (ajuste com os valores reais do seu modelo)
        st.subheader("Fatores Importantes para Engajamento")
        st.markdown("""
        - Tempo de jogo (PlayTimeHours)
        - N√≠vel do jogador (PlayerLevel)
        - Dificuldade do jogo (GameDifficulty)
        - Conquistas desbloqueadas (AchievementsUnlocked)
        """)
        
        # Gr√°fico (valores exemplos - substitua pelos reais)
        st.subheader("Rela√ß√£o entre Vari√°veis")
        fig, ax = plt.subplots()
        sample_data = pd.DataFrame({
            'Vari√°vel': ['Tempo de Jogo', 'N√≠vel', 'Dificuldade', 'Conquistas'],
            'Import√¢ncia': [0.45, 0.3, 0.15, 0.1]  
        })
        sns.barplot(data=sample_data, x='Import√¢ncia', y='Vari√°vel', ax=ax)
        st.pyplot(fig)
        
    else:
        st.error(f"Erro: Modelo n√£o encontrado em {model_path}")
        st.write("Arquivos dispon√≠veis:", os.listdir('models'))
        
except Exception as e:
    st.error(f"Erro ao carregar o modelo: {str(e)}")
    st.write("Detalhes t√©cnicos:", e)

# Rodap√©
st.markdown("---")
st.caption("Desenvolvido por [Seu Nome] | [Reposit√≥rio GitHub](https://github.com/thaisar13)")
